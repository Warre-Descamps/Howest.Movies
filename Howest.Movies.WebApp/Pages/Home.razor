@using Howest.Movies.Sdk.Abstractions
@using Howest.Movies.Dtos.Filters
@inject IMoviesSdk MoviesSdk
@inject IJSRuntime JsRuntime
@page "/"

<PageTitle>Home</PageTitle>

<MudOverlay Visible="@(_topRatedMovies == null || _movies == null)" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<div @ref="_scrollContainer" @onscroll="HandleScrollAsync">
    @if (_topRatedMovies != null && _movies != null)
    {
        if (_topRatedMovies.Items.Count > 0)
        {
            <MudText Typo="Typo.h4" Class="my-4">Top Rated Movies</MudText>
            <MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0">
                @foreach (var movie in _topRatedMovies.Items)
                {
                    <MovieCard @Movie=movie/>
                }
            </MudPaper>
        }
        <MudText Typo="Typo.h4" Class="my-4">Movies</MudText>
        <MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0">
            @foreach (var movie in _movies.Items)
            {
                <MovieCard @Movie=movie/>
            }
        </MudPaper>
    }
</div>
@code
{
    private ElementReference _scrollContainer;
    private PaginationResult<IList<MovieResult>>? _topRatedMovies;
    private PaginationResult<IList<MovieResult>>? _movies;

    protected override async Task OnInitializedAsync()
    {
        var topResult = await MoviesSdk.Movies.GetTopAsync();
        if (topResult.IsSuccess)
        {
            _topRatedMovies = topResult.Data;
        }
        
        var result = await MoviesSdk.Movies.GetAsync();
        if (result.IsSuccess)
        {
            _movies = result.Data;
        }
    }
    
    private async Task LoadMoreContentAsync()
    {
        if (_movies is null || _movies.Items.Count < _movies.From + _movies.Size)
            return;
        
        var result = await MoviesSdk.Movies.GetAsync(new MoviesFilter(), new PaginationFilter
        {
            From = _movies.From + _movies.Size,
            Size = _movies.Size
        });
        if (result.IsSuccess)
        {
            _movies.From = result.Data!.From;
            _movies.Size = result.Data.Size;
            foreach (var movie in result.Data.Items)
            {
                _movies.Items.Add(movie);
            }
            StateHasChanged();
        }
    }

    private async Task HandleScrollAsync()
    {
        var isAtBottom = await JsRuntime.InvokeAsync<bool>("isScrollAtBottom", _scrollContainer);
        if (isAtBottom)
        {
            await LoadMoreContentAsync();
        }
    }
}
