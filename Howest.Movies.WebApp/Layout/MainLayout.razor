@using Blazored.LocalStorage
@using Howest.Movies.Dtos.Filters
@using Howest.Movies.Sdk.Abstractions
@using Howest.Movies.WebApp.Components.Dialogs
@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudAutocomplete
            T="MovieResult" @bind-Value="_movieResult" ResetValueOnEmptyText="true" OnInternalInputChanged="Navigate"
            SearchFuncWithCancel="@Search" Immediate="true" ToStringFunc="ToStringFunc" MinCharacters="2" Clearable="true"
            AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Placeholder="Search"
            Margin="Margin.Dense" Variant="Variant.Outlined" Dense="true" Style="background: #edfff2; color: black; border-radius: .3em;">
            <ItemTemplate>
                <MovieListItem Movie="context"/>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Typo="Typo.h5">No items found.</MudText>
            </NoItemsTemplate>
        </MudAutocomplete>
        <MudSpacer/>
        <MudMenu>
            <ActivatorContent>
                @if (User is not null)
                {
                    <MudTooltip Text="@User.Email" Placement="Placement.Left">
                        <MudAvatar Color="Color.Tertiary">
                            @User.Email.First()
                        </MudAvatar>
                    </MudTooltip>
                }
                else
                {
                    <MudAvatar>
                        <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit"/>
                    </MudAvatar>
                }
            </ActivatorContent>
            <ChildContent>
                @if (User is not null)
                {
                    <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="OpenLoginDialogAsync">Login</MudMenuItem>
                    <MudMenuItem OnClick="OpenRegisterDialogAsync">Register</MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudMainContent>
        <MudContainer Style="min-width: 430px" MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-5">
            <CascadingValue Value="User">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MovieResult? _movieResult;
    
    [Inject] private IMoviesSdk MoviesSdk { get; init; } = null!;
    [Inject] private NavigationManager NavigationManager { get; init; } = null!;
    [Inject] private IDialogService DialogService { get; init; } = null!;
    [Inject] private ISnackbar Snackbar { get; init; } = null!;
    [Inject] private ILocalStorageService LocalStorageService { get; init; } = null!;
    
    internal UserInfoResult? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userInfo = await MoviesSdk.Identity.TryGetUserAsync();
        if (userInfo.IsSuccess)
            User = userInfo.Data;
    }

    private async Task<IEnumerable<MovieResult>> Search(string value, CancellationToken token)
    {
        var result = await MoviesSdk.Movies.GetAsync(new MoviesFilter
        {
            Query = value
        }, new PaginationFilter(), token);
        return !result.IsSuccess ? new List<MovieResult>() : result.Data!.Items;
    }

    private string ToStringFunc(MovieResult arg)
    {
        return arg.Title;
    }

    private void Navigate()
    {
        if (_movieResult is null)
            return;
        
        NavigationManager.NavigateTo($"/movie/{_movieResult.Id}");
        
    }

    private async Task OpenLoginDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<LoginDialog>("Login", options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;
        
        User = result.Data as UserInfoResult;
        StateHasChanged();
        Snackbar.Add("Login successful", Severity.Success);
    }
    
    private async Task OpenRegisterDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<RegisterDialog>("Register", options);
        var result = await dialog.Result;
        if (result.Canceled)
            return;
        
        Snackbar.Add("Registration successful", Severity.Success);
        await OpenLoginDialogAsync();
    }

    private async Task Logout()
    {
        User = null;
        await LocalStorageService.RemoveItemAsync("user");
        await MoviesSdk.Identity.LogoutAsync();
        StateHasChanged();
        Snackbar.Add("Logout successful", Severity.Success);
    }

}