@using Howest.Movies.Sdk.Endpoints.Abstractions
@using Howest.Movies.WebApp.Helpers
<MudCard Style="width: 320px">
    @if(Review is null)
    {
        <MudCardContent>
            <MudText Typo="Typo.h6">Write a review</MudText>
            <MudRating MaxValue="5" @bind-SelectedValue="@_rating"/>
            <MudTextField T="string" Label="Review" Variant="Variant.Filled" @bind-Value="_comment"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitAsync">Submit</MudButton>
        </MudCardActions>
    }
    else
    {
        <MudCardHeader>
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
                <MudRating ReadOnly="true" MaxValue="5" SelectedValue="@(Review.Rating / 2)"/>
                <MudText>@Review.Reviewer</MudText>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <MudText>@Review.Comment</MudText>
        </MudCardContent>
    }
</MudCard>

@code {
    private int _rating = 0;
    private string _comment = string.Empty;
    
    [Inject] private IMovieEndpoint MovieEndpoint { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    
    [Parameter] public Guid? MovieId { get; set; }
    [Parameter] public ReviewResult? Review { get; set; }
    [Parameter] public EventCallback OnReviewAdded { get; set; }

    private async Task SubmitAsync()
    {
        if (!OnReviewAdded.HasDelegate)
        {
            throw new ArgumentNullException(nameof(OnReviewAdded));
        }
        if (MovieId is null)
        {
            throw new ArgumentNullException(nameof(MovieId));
        }
        
        var result = await MovieEndpoint.AddReviewAsync(MovieId!.Value, new ReviewRequest
        {
            Comment = _comment,
            Rating = (byte)(_rating * 2)
        });

        if (result.Messages.Any())
        {
            foreach (var message in result.Messages)
            {
                Snackbar.Add(message.Message, SeverityHelper.GetSeverityClass(message.Type));
            }
            return;
        }
        
        if (result.IsSuccess)
        {
            Snackbar.Add("Review added", Severity.Success);
            await OnReviewAdded.InvokeAsync();
        }
        else
        {
            Snackbar.Add("Failed to add review", Severity.Error);
        }
    }
}